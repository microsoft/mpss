steps:
- task: Powershell@2
  displayName: 'Get tool info'
  name: GetToolInfo
  inputs:
    targetType: 'inline'
    script: |
        function Get-AndroidNdkMaxApi {
            param(
                # Optionally pass a specific NDK path; otherwise we auto-detect.
                [string]$NdkRoot
            )

            # 1. Locate the NDK root --------------------------------------------------
            if (-not $NdkRoot) {
                # a) Respect common env-vars
                $NdkRoot = $Env:ANDROID_NDK_ROOT, $Env:ANDROID_NDK_HOME |
                           Where-Object { $_ } | Select-Object -First 1

                # b) Otherwise pick the *latest* version under the SDK
                if (-not $NdkRoot) {
                    $sdkRoot = $Env:ANDROID_SDK_ROOT, $Env:ANDROID_HOME |
                               Where-Object { $_ } | Select-Object -First 1
                    if (-not $sdkRoot) { throw "ANDROID_SDK_ROOT / ANDROID_HOME not set." }

                    $NdkRoot = Get-ChildItem "$sdkRoot\ndk" -Directory |
                               Sort-Object { [version]$_.Name } -Descending |
                               Select-Object -First 1 |
                               ForEach-Object FullName

                    # fallback for really old layouts
                    if (-not $NdkRoot -and (Test-Path "$sdkRoot\ndk-bundle")) {
                        $NdkRoot = "$sdkRoot\ndk-bundle"
                    }
                }
            }

            if (-not (Test-Path $NdkRoot)) {
                throw "NDK not found at '$NdkRoot'."
            }

            # 2. Read meta/platforms.json --------------------------------------------
            $metaFile = Join-Path $NdkRoot "meta\platforms.json"
            if (Test-Path $metaFile) {
                $json = Get-Content $metaFile -Raw | ConvertFrom-Json
                return [int]$json.max
            }

            # 3. Legacy NDKs (< r23): fall back to directory scan ---------------------
            $maxApi = Get-ChildItem "$NdkRoot\platforms" -Directory |
                      Where-Object Name -match '^android-(\d+)$' |
                      ForEach-Object { [int]$Matches[1] } |
                      Sort-Object -Descending |
                      Select-Object -First 1
            if (-not $maxApi) { throw "Unable to determine supported API levels." }
            return $maxApi
        }

        $maxSupportedApi = Get-AndroidNdkMaxApi
        Write-Host "Highest API level supported by this NDK: $maxSupportedApi"        
        $env:MPSS_ANDROID_API_LEVEL = $maxSupportedApi
        echo "##vso[task.setvariable variable=MPSSAndroidAPILevel;isOutput=true]$maxSupportedApi"


        $ninjaPath = (Get-Command ninja).Source
        if (-not $ninjaPath) {
            throw "Ninja build tool not found. Please install Ninja."
        } else {
            $ninjaPath = $ninjaPath -replace '\\', '/'  # Normalize path for consistency
            echo "Ninja found at: $ninjaPath"
        }
        $env:NINJA_PATH = $ninjaPath
        echo "##vso[task.setvariable variable=NinjaPath;isOutput=true]$ninjaPath"

        # Normalize Android NDK path
        $ndkHome = $env:ANDROID_NDK_HOME
        if (-not $ndkHome) {
            throw "ANDROID_NDK_HOME environment variable is not set."
        } else {
            $ndkHome = $ndkHome -replace '\\', '/'  # Normalize path for consistency
            echo "ANDROID_NDK_HOME: $ndkHome"
        }
        echo "##vso[task.setvariable variable=AndroidNdkHome;isOutput=true]$ndkHome"

- task: CmdLine@2
  displayName: 'Bootstrap vcpkg'
  inputs:
    script: |
      cd $(Build.SourcesDirectory)
      git clone https://github.com/microsoft/vcpkg.git
      cd vcpkg
      git checkout 2025.06.13
      bootstrap-vcpkg.bat -disableMetrics
    workingDirectory: '$(Build.SourcesDirectory)'
    failOnStderr: false

- task: CMake@1
  displayName: 'Configure MPSS for x64'
  inputs:
    cmakeArgs: >
        -S .
        -B build-x64
        -GNinja
        -DCMAKE_BUILD_TYPE='${{ parameters.configuration }}'
        -DMPSS_BUILD_MPSS_CORE_SHARED=ON
        -DCMAKE_SYSTEM_NAME=Android
        -DCMAKE_SYSTEM_VERSION=$(GetToolInfo.MPSSAndroidAPILevel)
        -DCMAKE_ANDROID_ARCH_ABI=x86_64
        -DCMAKE_MAKE_PROGRAM=$(GetToolInfo.NinjaPath)
        -DCMAKE_ANDROID_NDK=$(GetToolInfo.AndroidNdkHome)
        -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/vcpkg/scripts/buildsystems/vcpkg.cmake
    workingDirectory: '$(Build.SourcesDirectory)'

- task: CMake@1
  displayName: 'Configure MPSS for ARM64'
  inputs:
    cmakeArgs: >
        -S .
        -B build-arm64
        -GNinja
        -DCMAKE_BUILD_TYPE='${{ parameters.configuration }}'
        -DMPSS_BUILD_MPSS_CORE_SHARED=ON
        -DCMAKE_SYSTEM_NAME=Android
        -DCMAKE_SYSTEM_VERSION=$(GetToolInfo.MPSSAndroidAPILevel)
        -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a
        -DCMAKE_MAKE_PROGRAM=$(GetToolInfo.NinjaPath)
        -DCMAKE_ANDROID_NDK=$(GetToolInfo.AndroidNdkHome)
        -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/vcpkg/scripts/buildsystems/vcpkg.cmake
    workingDirectory: '$(Build.SourcesDirectory)'

- task: CMake@1
  displayName: 'Build MPSS for x64'
  inputs:
    cmakeArgs: --build build-x64 --config '${{ parameters.configuration }}'
    workingDirectory: '$(Build.SourcesDirectory)'

- task: CMake@1
  displayName: 'Build MPSS for Arm64'
  inputs:
    cmakeArgs: --build build-arm64 --config '${{ parameters.configuration }}'
    workingDirectory: '$(Build.SourcesDirectory)'
